{"version":3,"sources":["constants/constants.ts","api/api.ts","components/Loader/Loader.tsx","components/Details/Details.tsx","components/PokemonList/PokemonList.tsx","components/PokemonFilter/PokemonFilter.tsx","components/Header/Header.tsx","components/ButtonMore/ButtonMore.tsx","index.tsx","components/App/App.tsx"],"names":["initialHero","img","id","name","types","attack","defense","hp","spAttack","spDefense","speed","weight","totalMoves","getData","url","a","fetch","response","ok","Error","statusText","json","catch","error","Loader","className","xmlns","viewBox","preserveAspectRatio","fill","stroke","strokeWidth","strokeDasharray","d","strokeLinecap","attributeName","repeatCount","dur","keyTimes","values","Details","heroFromList","isLoading","useState","pokemon","setPokemon","useEffect","then","item","map","t","type","stats","find","el","stat","base_stat","moves","length","hero","src","alt","key","PokemonList","pokemons","heroClick","handleClick","tabIndex","role","onClick","onKeyDown","pokemonItem","PokemonFilter","filterParam","temp","includes","push","Header","ButtonMore","getMore","ReactDOM","render","random","Math","floor","setPokemons","pokemonsVisible","setPokemonsVisible","setIsLoading","setError","offset","setOffset","pokemonsList","Promise","all","results","result","currentPokemons","fetchSata","errorFromServer","message","filter","some","document","getElementById"],"mappings":"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","file":"static/js/main.672f6088.chunk.js","sourcesContent":["\nexport const BASE_URL = 'https://pokeapi.co/api/v2/pokemon/';\n\n\nexport const initialHero: Hero = {\n  img: '',\n  id: 1,\n  name: '',\n  types: [],\n  attack: 0,\n  defense: 0,\n  hp: 0,\n  spAttack: 0,\n  spDefense: 0,\n  speed: 0,\n  weight: 0,\n  totalMoves: 0,\n};\n","import { BASE_URL } from '../constants/constants';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(BASE_URL + url);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  return response.json()\n    .catch(error => error);\n};\n\nexport const getPokemonItem = (name: string|number) => {\n  return getData<HeroFromServer>(`${name}`).then((item) => {\n    return {\n      img: `https://pokeres.bastionbot.org/images/pokemon/${item.id}.png`,\n      id: item.id,\n      name: item.name,\n      types: item.types.map((t: TypesFromServer) => t.type.name),\n      attack: item.stats.find((el: StatsFromServer) => el.stat.name === 'attack')?.base_stat as number,\n      defense: item.stats.find((el: StatsFromServer) => el.stat.name === 'defense')?.base_stat as number,\n      hp: item.stats.find((el: StatsFromServer) => el.stat.name === 'hp')?.base_stat as number,\n      spAttack: item.stats.find((el: StatsFromServer) => el.stat.name === 'special-attack')?.base_stat as number,\n      spDefense: item.stats.find((el: StatsFromServer) => el.stat.name === 'special-defense')?.base_stat as number,\n      speed: item.stats.find((el: StatsFromServer) => el.stat.name === 'speed')?.base_stat as number,\n      weight: item.weight,\n      totalMoves: item.moves.length,\n    };\n  });\n};\n","import React, { FC } from 'react';\nimport './Loader.scss';\n\nexport const Loader: FC = () => {\n  return (\n    <div className=\"loader\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n        <path fill=\"none\" stroke=\"#eee\" strokeWidth=\"5\" strokeDasharray=\"42.76482137044271 42.76482137044271\" d=\"M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z\" strokeLinecap=\"round\">\n          <animate attributeName=\"stroke-dashoffset\" repeatCount=\"indefinite\" dur=\"3.571428571428571s\" keyTimes=\"0;1\" values=\"0;256.58892822265625\" />\n        </path>\n      </svg>\n    </div>\n  );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { getPokemonItem } from '../../api/api';\nimport { initialHero } from '../../constants/constants';\nimport { Loader } from '../Loader';\nimport './Details.scss';\n\ninterface Props {\n  heroFromList: string|number;\n  isLoading: boolean;\n}\n\nexport const Details: FC<Props> = ({ heroFromList, isLoading }) => {\n  const [pokemon, setPokemon] = useState<Hero>(initialHero);\n\n  useEffect(() => {\n    getPokemonItem(heroFromList).then((hero: Hero) => {\n      setPokemon(hero);\n    });\n  }, [heroFromList]);\n\n  return (\n    <div className=\"card mb-3\">\n      {isLoading\n        ? <Loader />\n        : (\n          <>\n            <h3 className=\"card-header\">{`#${pokemon.id} ${pokemon.name}`}</h3>\n            <div className=\"card-body\">\n              <img\n                className=\"pokemon\"\n                src={pokemon.img}\n                alt=\"Card\"\n              />\n              <ul className=\"list-group list-group-flush\">\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>Type:</span>\n                  {pokemon.types.map((t: string) => <span key={t}>{t}</span>)}\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>Attacks:</span>\n                  <span>{pokemon.attack}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>Defense:</span>\n                  <span>{pokemon.defense}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>HP:</span>\n                  <span>{pokemon.hp}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>SP Attack:</span>\n                  <span>{pokemon.spAttack}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>SP Defense:</span>\n                  <span>{pokemon.spDefense}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>Speed:</span>\n                  <span>{pokemon.speed}</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>Weight:</span>\n                  <span>{ pokemon.weight }</span>\n                </li>\n                <li className=\"list-group-item d-flex justify-content-between\">\n                  <span>Total Movies:</span>\n                  <span>{ pokemon.totalMoves }</span>\n                </li>\n              </ul>\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Loader } from '../Loader';\nimport './PokemonList.scss';\n\ninterface Props {\n  pokemons: Pokemon[];\n  heroClick(name: string): void;\n  isLoading: boolean;\n}\n\nexport const PokemonList: FC<Props> = ({ pokemons, heroClick, isLoading }) => {\n  const handleClick = (name: string) => {\n    heroClick(name);\n  };\n\n  return (\n    <div className=\"grid-container\">\n      {pokemons.map(hero => (\n        <div\n          key={hero.name}\n          className=\"card mb-3\"\n          tabIndex={0}\n          role=\"button\"\n          onClick={() => handleClick(hero.name)}\n          onKeyDown={() => handleClick(hero.name)}\n        >\n          {isLoading\n            ? <Loader />\n            : (\n              <>\n                <h3 className=\"card-header\">{hero.name}</h3>\n                <div className=\"card-body\">\n                  <img\n                    className=\"pokemon\"\n                    src={hero.img}\n                    alt=\"Card\"\n                  />\n                </div>\n              </>\n            )}\n\n          <div className=\"card-footer text-muted d-flex justify-content-between\">\n            {!isLoading && (\n              <>\n                {hero.pokemonItem && (\n                  hero.pokemonItem.types.map((t: TypesFromServer) => <span key={hero.name + t.type.name} className=\"badge badge-primary\">{t.type.name}</span>)\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './PokemonFilter.scss';\n\ninterface Props {\n  pokemons: Pokemon[];\n  filterParam(param: string): void;\n}\n\nexport const PokemonFilter: FC<Props> = ({ pokemons, filterParam }) => {\n  const temp: string[] = ['all'];\n\n  pokemons\n    .map(hero => hero.pokemonItem && hero.pokemonItem.types\n      .map((t: TypesFromServer) => {\n        if (!temp.includes(t.type.name)) {\n          temp.push(t.type.name);\n        }\n\n        return t.type.name;\n      }));\n\n  const handleClick = (filterBy: string) => {\n    filterParam(filterBy);\n  };\n\n  return (\n    <ul className=\"filter\">\n      {temp.map((t) => (\n        <li key={t}>\n          <button\n            type=\"button\"\n            className=\"badge badge-primary\"\n            onClick={() => handleClick(t)}\n          >\n            {t}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { FC } from 'react';\nimport { PokemonFilter } from '../PokemonFilter';\nimport './Header.scss';\n\ninterface Props {\n  pokemons: Pokemon[];\n  filterParam(param: string): void;\n}\n\nexport const Header: FC<Props> = ({ pokemons, filterParam }) => {\n  return (\n    <div className=\"jumbotron custom\">\n      <h1 className=\"display-3\">Pokedex</h1>\n      <p className=\"lead\">\n        You can see random Pokemon here ore choice your favorite Pokemon.\n      </p>\n      <hr className=\"my-4\" />\n      <PokemonFilter pokemons={pokemons} filterParam={filterParam} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './ButtonMore.scss';\n\ninterface Props {\n  getMore(): void;\n}\n\nexport const ButtonMore: FC<Props> = ({ getMore }) => {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-primary btn-lg btn-block mt25\"\n      onClick={getMore}\n    >\n      Load More\n    </button>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { FC, useState, useEffect } from 'react';\nimport { getData } from '../../api/api';\nimport { Details } from '../Details';\nimport { PokemonList } from '../PokemonList';\nimport { Header } from '../Header';\nimport { ButtonMore } from '../ButtonMore';\n\nimport 'bootswatch/dist/slate/bootstrap.min.css';\nimport './App.scss';\n\nexport const App: FC = () => {\n  const random: number = Math.floor(Math.random() * (500 - 1 + 1));\n  const [pokemon, setPokemon] = useState<number|string>(random);\n  const [pokemons, setPokemons] = useState<Array<Pokemon>|[]>([]);\n  const [pokemonsVisible, setPokemonsVisible] = useState<Array<Pokemon>|[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [offset, setOffset] = useState(12);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchSata = async () => {\n      interface Response {\n        results: Pokemon[];\n      }\n      const pokemonsList: Response = await getData(`?limit=${offset}`);\n\n      const currentPokemons: Pokemon[] = await Promise\n        .all(pokemonsList.results.map(async (result) => {\n          const response = await fetch(result.url);\n          const pokemonItem = await response.json();\n\n          return {\n            ...result,\n            img: `https://pokeres.bastionbot.org/images/pokemon/${pokemonItem.id}.png`,\n            pokemonItem,\n          };\n        }));\n\n      setPokemons(currentPokemons);\n      setPokemonsVisible(currentPokemons);\n    };\n\n    fetchSata().then(() => {\n      setIsLoading(false);\n    }).catch((errorFromServer) => {\n      setError(errorFromServer.message || 'error');\n    });\n  }, [offset]);\n\n  const handleLoadMore = () => {\n    setOffset(offset + 12);\n  };\n\n  const setPokemonName = (name: string) => {\n    setPokemon(name);\n  };\n\n  const setFilterParam = (filterParam: string) => {\n    if (filterParam === 'all') {\n      return setPokemonsVisible(pokemons);\n    }\n\n    setPokemonsVisible(pokemons\n      .filter(hero => hero.pokemonItem?.types\n        .some(item => item.type.name === filterParam)));\n\n    return filterParam;\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <Header pokemons={pokemons} filterParam={setFilterParam} />\n      </div>\n      <div className=\"row d-flex align-items-start justify-content-between\">\n        {error\n          ? <p>{error}</p>\n          : (\n            <>\n              <main className=\"pokemons-list\">\n                <PokemonList\n                  pokemons={pokemonsVisible}\n                  heroClick={setPokemonName}\n                  isLoading={isLoading}\n                />\n              </main>\n              <aside className=\"details\">\n                <Details heroFromList={pokemon} isLoading={isLoading} />\n              </aside>\n            </>\n          )}\n      </div>\n      <div className=\"row d-flex justify-content-center\">\n        <ButtonMore getMore={handleLoadMore} />\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}